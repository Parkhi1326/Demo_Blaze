{"name": "test_contact", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=134.0.6998.36)\nStacktrace:\n\tGetHandleVerifier [0x00007FF74900FE45+26629]\n\t(No symbol) [0x00007FF748F76010]\n\t(No symbol) [0x00007FF748E0914C]\n\t(No symbol) [0x00007FF748E590F4]\n\t(No symbol) [0x00007FF748E5712C]\n\t(No symbol) [0x00007FF748E87AAA]\n\t(No symbol) [0x00007FF748E52156]\n\t(No symbol) [0x00007FF748E87CC0]\n\t(No symbol) [0x00007FF748EB0169]\n\t(No symbol) [0x00007FF748E87883]\n\t(No symbol) [0x00007FF748E50550]\n\t(No symbol) [0x00007FF748E51803]\n\tGetHandleVerifier [0x00007FF7493672BD+3529853]\n\tGetHandleVerifier [0x00007FF74937DA22+3621858]\n\tGetHandleVerifier [0x00007FF7493724D3+3575443]\n\tGetHandleVerifier [0x00007FF7490DB77A+860474]\n\t(No symbol) [0x00007FF748F8088F]\n\t(No symbol) [0x00007FF748F7CBC4]\n\t(No symbol) [0x00007FF748F7CD66]\n\t(No symbol) [0x00007FF748F6C2C9]\n\tBaseThreadInitThunk [0x00007FFAA19BE8D7+23]\n\tRtlUserThreadStart [0x00007FFAA24DBF2C+44]", "trace": "self = <Allure_Contact.Test_Contact object at 0x0000028A67629310>\n\n    @allure.severity(allure.severity_level.NORMAL)\n    def test_contact(self):\n        self.driver = webdriver.Chrome()\n        self.driver.get(\"https://www.demoblaze.com/index.html\")\n        self.driver.find_element(By.XPATH,\"//*[text()='Contact']\").click()\n>       self.driver.find_element(By.ID,\"recipient-email\").send_keys(\"parkhigera@gmail.com\")\n\nAllure_Reports\\Allure_Contact.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:301: in send_keys\n    self._execute(\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:570: in _execute\n    return self._parent.execute(command, params)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000028A679BAF90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF748F6C2C9]\\\\n\\\\tBaseThreadInitThunk [0x00007FFAA19BE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFAA24DBF2C+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=134.0.6998.36)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF74900FE45+26629]\nE       \t(No symbol) [0x00007FF748F76010]\nE       \t(No symbol) [0x00007FF748E0914C]\nE       \t(No symbol) [0x00007FF748E590F4]\nE       \t(No symbol) [0x00007FF748E5712C]\nE       \t(No symbol) [0x00007FF748E87AAA]\nE       \t(No symbol) [0x00007FF748E52156]\nE       \t(No symbol) [0x00007FF748E87CC0]\nE       \t(No symbol) [0x00007FF748EB0169]\nE       \t(No symbol) [0x00007FF748E87883]\nE       \t(No symbol) [0x00007FF748E50550]\nE       \t(No symbol) [0x00007FF748E51803]\nE       \tGetHandleVerifier [0x00007FF7493672BD+3529853]\nE       \tGetHandleVerifier [0x00007FF74937DA22+3621858]\nE       \tGetHandleVerifier [0x00007FF7493724D3+3575443]\nE       \tGetHandleVerifier [0x00007FF7490DB77A+860474]\nE       \t(No symbol) [0x00007FF748F8088F]\nE       \t(No symbol) [0x00007FF748F7CBC4]\nE       \t(No symbol) [0x00007FF748F7CD66]\nE       \t(No symbol) [0x00007FF748F6C2C9]\nE       \tBaseThreadInitThunk [0x00007FFAA19BE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFAA24DBF2C+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementNotInteractableException"}, "start": 1741687872102, "stop": 1741687877240, "uuid": "92e9e4de-8876-42b0-a5e4-1fc1de7b1026", "historyId": "ae51e1e1ec5e47cf606622f9cdd39777", "testCaseId": "ae51e1e1ec5e47cf606622f9cdd39777", "fullName": "Allure_Reports.Allure_Contact.Test_Contact#test_contact", "labels": [{"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "Allure_Reports"}, {"name": "suite", "value": "Allure_Contact"}, {"name": "subSuite", "value": "Test_Contact"}, {"name": "host", "value": "DEKSTOP-MVP0918"}, {"name": "thread", "value": "8012-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Allure_Reports.Allure_Contact"}]}